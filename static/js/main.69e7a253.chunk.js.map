{"version":3,"sources":["components/MovieItem/MovieItem.js","components/MovieTabs/MovieTabs.js","components/Pagination/Pagination.js","App.js","utils/api.js","serviceWorker.js","index.js"],"names":["MovieItem","state","willWatch","this","props","movie","removeMovie","addMovieToWillWatch","removeMovieFromWillWatch","className","src","backdrop_path","poster_path","alt","title","vote_average","type","onClick","setState","bind","React","Component","MovieTabs","sort_by","updateSortBy","handleClick","value","getClassName","Pagination","page","total_pages","onChangePage","console","log","aria-label","App","updateMovies","movies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","getPage","currentPage","getMovies","prevProps","prevState","snapshot","nextProps","nextState","nextContext","fetch","then","response","json","data","results","map","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69e7a253.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieItem.css'\n\nclass MovieItem extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            willWatch: false\n        }\n    }\n\n    render() {\n        const {movie, removeMovie, addMovieToWillWatch, removeMovieFromWillWatch} = this.props;\n        return (\n                <div className=\"card\">\n                    <img className=\"card-img-top\"\n                         src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path || movie.poster_path}`}\n                         alt=\"\"\n                    />\n                    <div className=\"card-body\">\n                        <h6 className=\"card-title\">{movie.title}</h6>\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                            <p className=\"mb-0\">Rating: {movie.vote_average}</p>\n                            {this.state.willWatch ?\n                                    (<button type=\"button\"\n                                            className=\"btn btn-success\"\n                                             onClick={() => {\n                                                 this.setState({\n                                                     willWatch: false\n                                                 });\n                                                 removeMovieFromWillWatch(movie)}\n                                             }\n                                    >\n                                        Remove Will Watch\n                                    </button>) :\n                                    (<button type=\"button\"\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    willWatch: true\n                                                });\n                                                addMovieToWillWatch(movie)}\n                                            }\n                                    >\n                                        Add Will Watch\n                                    </button>)\n                            }\n                        </div>\n                        <button type=\"button\" onClick={removeMovie.bind(null, movie)}>Delete Movie</button>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default MovieItem;\n","import React from 'react';\n//import cn from 'classnames';\nimport './MovieTabs.css'\n\nclass MovieTabs extends React.Component {\n    render() {\n        const {sort_by, updateSortBy} = this.props;\n        const handleClick = value => () => {\n            updateSortBy(value)\n        };\n        const getClassName = value => {\n            return `nav-link ${\n                    sort_by === value ? \"active\" : \"\"\n            }`\n        }\n\n        return (\n                <ul className=\"tabs nav nav-pills\">\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"popularity.desc\")}\n                             onClick={handleClick(\"popularity.desc\")}\n                        >\n                            Popularity Desc\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"revenue.desc\")}\n                             onClick={handleClick(\"revenue.desc\")}\n                        >\n                            Revenue Asc\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"vote_average.desc\")}\n                             onClick={handleClick(\"vote_average.desc\")}\n                        >\n                            Vote Average Desc\n                        </div>\n                    </li>\n                </ul>\n        )\n    }\n}\n\nexport default MovieTabs;\n","import React from 'react';\nimport './Paginagion.css'\n\nclass Pagination extends React.Component {\n    render() {\n        const {page, total_pages, onChangePage} = this.props;\n        const handleClick = value => () => {\n            console.log('value', value)\n            onChangePage(value)\n        };\n        const getClassName = value => {\n            return `page-item ${\n                    page === value ? \"active\" : \"\"\n            }`\n        }\n\n        return (\n                <nav aria-label=\"Page navigation\">\n                    <ul className=\"pagination justify-content-end\">\n                        <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                            <span className=\"page-link\" onClick={handleClick(page >= 1 ? page - 1 : page)}>Previous</span>\n                        </li>\n                        <li className={getClassName(1)}>\n                            <span className=\"page-link\" onClick={handleClick(1)}>1</span>\n                        </li>\n                        <li className={getClassName(2)}>\n                            <span className=\"page-link\" onClick={handleClick(2)}>2</span>\n                        </li>\n                        <li className={getClassName(3)}>\n                            <span className=\"page-link\" onClick={handleClick(3)}>3</span>\n                        </li>\n                        <li className={`page-item ${page === total_pages ? 'disabled' : ''}`}>\n                            <span className=\"page-link\" onClick={handleClick(page + 1)}>Next</span>\n                        </li>\n                    </ul>\n                </nav>\n        )\n    }\n}\n\nexport default Pagination;\n","import React from 'react';\nimport './App.css';\n//import {moviesData} from './moviesData';\nimport MovieItem from './components/MovieItem/MovieItem'\nimport { API_KEY_3, API_URL } from './utils/api';\nimport MovieTabs from \"./components/MovieTabs/MovieTabs\";\nimport Pagination from \"./components/Pagination/Pagination\";\n\n//UI = fn(state, props)\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: 'revenue.desc',\n      page: 1,\n      total_pages: 500\n    }\n  }\n\n  componentDidMount() {\n   this.getMovies()\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.sort_by !== this.state.sort_by || prevState.page !== this.state.page) {\n      this.getMovies()\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const {sort_by, page} = nextProps;\n    return sort_by !== this.state.sort_by || page !== this.state.page;\n  }\n\n  getMovies() {\n    fetch(`${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.page}&total_pages=${this.state.total_pages}`).then((response) => {\n      return response.json()\n    }).then((data) => {\n      this.setState({\n        movies: data.results\n      })\n    });\n  }\n\n  removeMovie = movie => {\n    const updateMovies = this.state.movies.filter(item => {return item.id !== movie.id})\n\n    this.setState({\n      movies: updateMovies\n    });\n  };\n\n  addMovieToWillWatch = movie => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  removeMovieFromWillWatch = movie => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(item => {return item.id !== movie.id})\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  updateSortBy = value => {\n   this.setState({\n      sort_by: value\n    });\n  };\n\n  onChangePage = value => {\n    this.setState({\n      page: value\n    });\n  };\n\n  getPage = (currentPage) => {\n    return currentPage;\n  }\n\n\n  render() {\n    return (\n        <div className=\"container p-3\">\n          <div className=\"row\">\n            <div className=\"col-9\">\n              <div className=\"row mb-3\">\n                <div className=\"col-12\">\n                  <MovieTabs sort_by={this.state.sort_by}\n                             updateSortBy={this.updateSortBy}\n                  />\n                </div>\n              </div>\n              <div className=\"row mb-2\">\n                <div className=\"col-12\">\n                  <Pagination page={this.state.page}\n                              onChangePage={this.onChangePage}\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                  {this.state.movies.map(movie => {\n                    return(\n                      <div className=\"col-6 mb-4\" key={movie.id} >\n                        <MovieItem movie={movie}\n                                   removeMovie={this.removeMovie}\n                                   addMovieToWillWatch={this.addMovieToWillWatch}\n                                   removeMovieFromWillWatch={this.removeMovieFromWillWatch}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <Pagination page={this.state.page}\n                              onChangePage={this.onChangePage}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-3\">\n              <div className=\"row mb-3 pt-05\">\n                Will Watch: {this.state.moviesWillWatch.length} Movies\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\n\nexport const API_KEY_4 =\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}