{"version":3,"sources":["components/MovieItem/MovieItem.js","components/MovieTabs/MovieTabs.js","components/Pagination/Pagination.js","components/App/App.js","utils/api.js","serviceWorker.js","index.js"],"names":["MovieItem","state","willWatch","this","props","movie","removeMovie","addMovieToWillWatch","removeMovieFromWillWatch","className","src","backdrop_path","poster_path","process","alt","title","vote_average","min","max","value","type","onClick","bind","setState","React","Component","MovieTabs","sort_by","updateSortBy","handleClick","getClassName","Pagination","currentPage","page","total_pages","onChangePage","console","log","aria-label","App","updateMovies","movies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","getMovies","prevProps","prevState","snapshot","nextProps","nextState","nextContext","fetch","then","response","json","data","results","map","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50fa6d51.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieItem.css'\n\nclass MovieItem extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            willWatch: false\n        }\n    }\n\n    render() {\n        const {movie, removeMovie, addMovieToWillWatch, removeMovieFromWillWatch} = this.props;\n        return (\n                <div className=\"card\">\n                    <img className=\"card-img-top\"\n                         src={movie.backdrop_path || movie.poster_path ?\n                                 `https://image.tmdb.org/t/p/w500${movie.backdrop_path || movie.poster_path}`\n                                 : process.env.PUBLIC_URL + '/img/not_found.png'\n                         }\n                         alt=\"\"\n                    />\n                    <div className=\"card-body\">\n                        <h6 className=\"card-title\">{movie.title}</h6>\n                        <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                            <p className=\"mb-0\">Rating: {movie.vote_average}</p>\n                            <progress min={0} max={100} value={movie.vote_average*10} />\n                        </div>\n                        <div className=\"d-flex justify-content-between\">\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-secondary\" \n                            onClick={removeMovie.bind(null, movie)}>\n                                Delete Movie\n                        </button>\n                        {this.state.willWatch ?\n                                    (<button type=\"button\"\n                                            className=\"btn btn-success\"\n                                             onClick={() => {\n                                                 this.setState({\n                                                     willWatch: false\n                                                 });\n                                                 removeMovieFromWillWatch(movie)}\n                                             }\n                                    >\n                                        Remove Will Watch\n                                    </button>) :\n                                    (<button type=\"button\"\n                                            className=\"btn btn-secondary\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    willWatch: true\n                                                });\n                                                addMovieToWillWatch(movie)}\n                                            }\n                                    >\n                                        Add Will Watch\n                                    </button>)\n                            }\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default MovieItem;\n","import React from 'react';\n//import cn from 'classnames';\nimport './MovieTabs.css'\n\nclass MovieTabs extends React.Component {\n    render() {\n        const {sort_by, updateSortBy} = this.props;\n        const handleClick = value => () => {\n            updateSortBy(value)\n        };\n        const getClassName = value => {\n            return `nav-link ${\n                    sort_by === value ? \"active\" : \"\"\n            }`\n        }\n\n        return (\n                <ul className=\"tabs nav nav-pills\">\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"popularity.desc\")}\n                             onClick={handleClick(\"popularity.desc\")}\n                        >\n                            Popularity Desc\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"revenue.desc\")}\n                             onClick={handleClick(\"revenue.desc\")}\n                        >\n                            Revenue Asc\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div className={getClassName(\"vote_average.desc\")}\n                             onClick={handleClick(\"vote_average.desc\")}\n                        >\n                            Vote Average Desc\n                        </div>\n                    </li>\n                </ul>\n        )\n    }\n}\n\nexport default MovieTabs;\n","import React from 'react';\nimport './Paginagion.css'\n\nclass Pagination extends React.Component {\n\n    render() {\n        const {page, total_pages, onChangePage} = this.props;\n        const getClassName = value => {\n            return `page-item ${\n                    page === value ? \"active\" : \"\"\n            }`\n        }\n        const handleClick = value => () => {\n            console.log('value', value)\n            onChangePage(value)\n        };\n        const showPageNumbers = (currentPage) => {\n            console.log({currentPage});\n        }\n\n        return (\n                <nav aria-label=\"Page navigation\">\n                    <ul className=\"pagination justify-content-end\">\n                        <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                            <span className=\"page-link\" onClick={handleClick(page >= 1 ? page - 1 : page)}>Previous</span>\n                        </li>\n\n                        {showPageNumbers(page)}\n                        <li className={getClassName(page)}>\n                            <span className=\"page-link\" onClick={handleClick(page)}>{page}</span>\n                        </li>\n\n                        <li className={`page-item ${page === total_pages ? 'disabled' : ''}`}>\n                            <span className=\"page-link\" onClick={handleClick(page !== total_pages ? page + 1 : page)}>Next</span>\n                        </li>\n                    </ul>\n                </nav>\n        )\n    }\n}\n\nexport default Pagination;\n","import React from 'react';\nimport './App.css';\nimport { API_KEY_3, API_URL } from '../../utils/api';\nimport MovieItem from '../MovieItem/MovieItem';\nimport MovieTabs from '../MovieTabs/MovieTabs';\nimport Pagination from '../Pagination/Pagination';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: 'revenue.desc',\n      page: 1,\n      total_pages: 500\n    }\n  }\n\n  componentDidMount() {\n   this.getMovies()\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.sort_by !== this.state.sort_by || prevState.page !== this.state.page) {\n      this.getMovies()\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const {sort_by, page} = nextProps;\n    return sort_by !== this.state.sort_by || page !== this.state.page;\n  }\n\n  getMovies() {\n    fetch(`${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.page}&total_pages=${this.state.total_pages}`).then((response) => {\n      return response.json()\n    }).then((data) => {\n      this.setState({\n        movies: data.results\n      })\n    });\n  }\n\n  removeMovie = movie => {\n    const updateMovies = this.state.movies.filter(item => {return item.id !== movie.id})\n\n    this.setState({\n      movies: updateMovies\n    });\n  };\n\n  addMovieToWillWatch = movie => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  removeMovieFromWillWatch = movie => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(item => {return item.id !== movie.id})\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  };\n\n  updateSortBy = value => {\n   this.setState({\n      sort_by: value\n    });\n  };\n\n  onChangePage = value => {\n    this.setState({\n      page: value\n    });\n  };\n\n  render() {\n    return (\n            <div className=\"container p-3\">\n              <div className=\"row\">\n                <div className=\"col-9\">\n                  <div className=\"row mb-3\">\n                    <div className=\"col-12\">\n                      <MovieTabs sort_by={this.state.sort_by}\n                                 updateSortBy={this.updateSortBy}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row mb-2\">\n                    <div className=\"col-12\">\n                      <Pagination page={this.state.page}\n                                  onChangePage={this.onChangePage}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    {this.state.movies.map(movie => {\n                      return(\n                              <div className=\"col-6 mb-4\" key={movie.id} >\n                                <MovieItem movie={movie}\n                                           removeMovie={this.removeMovie}\n                                           addMovieToWillWatch={this.addMovieToWillWatch}\n                                           removeMovieFromWillWatch={this.removeMovieFromWillWatch}\n                                />\n                              </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-12\">\n                      <Pagination page={this.state.page}\n                                  onChangePage={this.onChangePage}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-3\">\n                  <div className=\"row mb-3 pt-05\">\n                    Will Watch: {this.state.moviesWillWatch.length} Movies\n                  </div>\n                </div>\n              </div>\n            </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\n\nexport const API_KEY_4 =\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}